AWSTemplateFormatVersion: '2010-09-09'
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 20
Outputs:
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - HelloWorldFunction
      - Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - HelloWorldFunctionRole
      - Arn
Resources:
  APIGatewayRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Path: /
    Type: AWS::IAM::Role
  HelloWorldFunction:
    Properties:
      CodeUri: s3://used-car-storage/0b989d895aea14b12d039e47d16c965f
      Environment:
        Variables:
          PARAM1: VALUE
      Handler: helloworld.App::handleRequest
      Runtime: java8
    Type: AWS::Serverless::Function
  MyStateMachine:
    Properties:
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"A Hello World example using an AWS Lambda function\"\
          ,\n  \"StartAt\": \"HelloWorld\",\n  \"States\": {\n    \"HelloWorld\":\
          \ {\n      \"Type\": \"Task\",\n      \"Resource\": \"${lambdaArn}\",\n\
          \      \"End\": true\n    }\n  }\n}"
        - lambdaArn:
            Fn::GetAtt:
            - HelloWorldFunction
            - Arn
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  PublicApi:
    Properties:
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title:
            Ref: AWS::StackName
        paths:
          /sfnonly:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - APIGatewayRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"input\": \"$util.escapeJavaScript($input.json('$'))\"\
                      ,\n  \"stateMachineArn\": \"${MyStateMachine}\"\n}"
                responses:
                  default:
                    headers:
                      Access-Control-Allow-Headers:
                        type: '''*'''
                    statusCode: '200'
                type: aws
                uri: arn:aws:apigateway:eu-west-1:states:action/StartExecution
        swagger: 2.0
      StageName: prod
    Type: AWS::Serverless::Api
  StatesExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: StatesExecutionPolicy
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
