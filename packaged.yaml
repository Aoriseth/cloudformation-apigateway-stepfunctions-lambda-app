AWSTemplateFormatVersion: '2010-09-09'
Description: 'cloudformation-apigateway-stepfunctions-lambda-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 20
Resources:
  APIGatewayRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Path: /
    Type: AWS::IAM::Role
  BusinessValidationFunction:
    Properties:
      CodeUri: s3://used-car-storage/f39c6618a4e5415034eb9f33e809a394
      Handler: functions.BusinessValidationFunction::handleRequest
      Runtime: java8
    Type: AWS::Serverless::Function
  EnrichmentFunction:
    Properties:
      CodeUri: s3://used-car-storage/9a5bc035cfd31e058f092b5a6970dc33
      Handler: functions.EnrichmentFunction::handleRequest
      Runtime: java8
    Type: AWS::Serverless::Function
  HelloWorldFunction:
    Properties:
      CodeUri: s3://used-car-storage/21f3c816429c95ff6cdcc2199a8814c0
      Environment:
        Variables:
          PARAM1: VALUE
      Handler: helloworld.App::handleRequest
      Runtime: java8
    Type: AWS::Serverless::Function
  MyStateMachine:
    Properties:
      DefinitionString:
        Fn::Sub:
        - "{\n  \"Comment\": \"Used Car dataflow\",\n  \"StartAt\": \"BusinessValidations\"\
          ,\n  \"States\": {\n      \"BusinessValidations\": {\n          \"Catch\"\
          : [\n              {\n                  \"ErrorEquals\": [\n           \
          \           \"States.ALL\"\n                  ],\n                  \"Next\"\
          : \"ErrorHandler\"\n              }\n          ],\n          \"Next\": \"\
          Enrichment\",\n          \"Resource\": \"${lambdaBusinessValidation}\",\n\
          \          \"Type\": \"Task\"\n      },\n      \"Enrichment\": {\n     \
          \     \"Catch\": [\n              {\n                  \"ErrorEquals\":\
          \ [\n                      \"States.ALL\"\n                  ],\n      \
          \            \"Next\": \"ErrorHandler\"\n              }\n          ],\n\
          \          \"Next\": \"StoreData\",\n          \"Resource\": \"${lambdaEnrichment}\"\
          ,\n          \"Type\": \"Task\"\n      },\n      \"ErrorHandler\": {\n \
          \         \"End\": true,\n          \"Resource\": \"arn:aws:lambda:eu-west-1:590045125155:function:errorHandler\"\
          ,\n          \"Type\": \"Task\"\n      },\n      \"StoreData\": {\n    \
          \      \"Catch\": [\n              {\n                  \"ErrorEquals\"\
          : [\n                      \"States.ALL\"\n                  ],\n      \
          \            \"Next\": \"ErrorHandler\"\n              }\n          ],\n\
          \          \"End\": true,\n          \"Resource\": \"${lambdaStore}\",\n\
          \          \"Type\": \"Task\"\n      }\n  }\n}"
        - lambdaBusinessValidation:
            Fn::GetAtt:
            - BusinessValidationFunction
            - Arn
          lambdaEnrichment:
            Fn::GetAtt:
            - EnrichmentFunction
            - Arn
          lambdaStore:
            Fn::GetAtt:
            - StoreFunction
            - Arn
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine
  PublicApi:
    Properties:
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title:
            Ref: AWS::StackName
        paths:
          /sfnonly:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security: []
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - APIGatewayRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"input\": \"$util.escapeJavaScript($input.json('$'))\"\
                      ,\n  \"stateMachineArn\": \"${MyStateMachine}\"\n}"
                responses:
                  default:
                    headers:
                      Access-Control-Allow-Headers:
                        type: '''*'''
                    statusCode: '200'
                type: aws
                uri: arn:aws:apigateway:eu-west-1:states:action/StartExecution
        swagger: 2.0
      StageName: prod
    Type: AWS::Serverless::Api
  StatesExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: StatesExecutionPolicy
    Type: AWS::IAM::Role
  StoreFunction:
    Properties:
      CodeUri: s3://used-car-storage/9d1fa9592f94c0bac47cb08378c4c77e
      Handler: functions.StoreFunction::handleRequest
      Runtime: java8
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
